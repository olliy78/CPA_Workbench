; 	PN	CB	;WAS IMMER DAS BEDEUTET ???

	TITL 'CBIOS Y23VO'
;C-BIOS NACH KRAMER
;ZEILENZAHL SOLLTE UEBEREINSTIMMEN !!!
;letzte Aenderung 26.01.90 07.06.89
;DEFINITION VON KONSTANTEN

CFDC:	EQU	7CH	;STEURUNG FDC
DFDC:	EQU	7DH	;DATEN FDC
TC:	EQU	78H	;TERMINAL COUNT (ENDE-IMPULS)    
PIOAD:	EQU	0FCH
NDISK:	EQU	2	;ANZAHL LAUFWERKE,1 IM RAM SIMULIERT
CR:	EQU	0DH
LF:	EQU	0AH
ROM:	EQU	0E200H	;60K RAM
BDOS:	EQU	ROM-0E00H
CCP:	EQU	ROM-1600H
RDSK:	EQU	7000H	;IM RAM SIMULIERTE FLOPPY
MCSTS:	EQU	0F003H
CIO:	EQU	0F13CH
MCO:	EQU	0F009H
MWO:	EQU	0F00FH
MRI:	EQU	0F012H
RESTR:	EQU	0F400H	;RESTART MONITOR
ZS:	EQU	0F089H
STR:	EQU0F	0F128H	;STRING-AUSGABE

	ORG	ROM

	JMP	BOOT
WBOTE:  JMP	WBOOT
        JMP     MCSTS   
	JMP	CIO
	JMP	MCO
	JMP	DRUCK
	JMP	MWO
	JMP	MRI
	JMP	HOME
	JMP	SDISK
	JMP	STRCK
	JMP	SSEC
	JMP	SDMA
	JMP	READ
	JMP	WRITE
	JMP	LSTS	;LISTER STATUS
	JMP	STRAN	;SECTOR TRANSFORMATION
;____________________________________________________________________________
;KOPF AUF SPUR NULL STELLEN
HOME:	LD	BC,0
	JR	STRCK-#
;LAUFWERK AUSWAELEN
;IN:C LAUFWERK (A ODER B)
;OUT:HL DPH-VEKTOR
SDISK:	LD	HL,0	;FEHLER
	PUSH	BC 
	LD	B,0
	LD	A,C
	CMP	NDISK-1
DISKS:	EQU	#-1
	JPNC	RESTR	;FEHLER
	LD	L,C
	LD	H,B
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL	;*16
	LD	DE,DPBAS	;DPH-VEKTOR 1.LW
	ADD	HL,DE
	LD	(4),A
	POP	BC
	RET
LSTS:	RET		;LISTER STATUS
STRAN:  EQU     #	;SECTOR TRANSFORMATION
;IN: BC LOG.SECTOR
;    DE TABELLE
	LD	B,0
	LD	A,D	;DE=0-3 KEINE TRANSF.
	OR	A
	JRNZ STRN1-#
	LD	H,B
	LD	L,C
	INC	HL
	RET
STRN1:  EX	DE,HL
	ADD	HL,BC
	LD	A,(HL)	;NEUE NR
	LD	(SEC1);A
	LD	L,A
	RET
;SEKTOR EINSTELLEN
;IN: C SECTOR
;OUT: (SEC1) =C
SSEC:   EQU	#
	LD	HL,SEC1
	LD      (HL),C
RET
;SPUR ANWAEHLEN
;IN: C SPUR
;OUT (TRACK)=C
STRCK:	EQU	#
	LD	HL,TRACK
	LD	(HL),C
RET
;DMA SETZEN
;IN: BC DMA
SDMA:	LD	(DMA);BC
	RET
;------------------------------------------------------------------
;CCP UND BDOSS VON DEN ERSTEN SPUREN DER DISKETTE LADEN
MSGS:	DB	0AH
	DB	0DH
	DB	'Y23V0 56K CP/M 2.2'
	DB	0DH
	DB	0AH
	DB	'RAMDISK ? (Y)'
	DB	0DH
	DB	0AH
	DB	0
BOOT:	EQU	#
	LD	A,0C3H
   	LD	(0),A
	LD	HL,WBOTE
	LD	(1),HL
	LD	(5),A
	LD	HL,BDOS+6
	LD	(6),HL
	LD	(38),A	;HALTEPUNKT VORBEREITEN
	LD	HL;RESTR
	LD	(39),HL
	LD	HL,HSGS
	CALL	STR
	CALL	SIO
	CMP	'Y'
	CAZ	IRDSK	;RAMDISK ERLAUBEN
	XOR	A
	LD	(3),A	;IOBYTE
	LD	(4),A
WBOOT	EQU     #	;LESEN DER SYSTEMSEKTOREN
	LD	SP,80H
	CALL	INIFD	;INITIALISIERUNG FLOPPY CONTROLLER
	LD	C,0	;LAUFWERK
	CALL	SDISK
	LD	B,2CH	;SECTORZAEHLER
	LD	C,0	;SPUR NR.
	CALL	STRCK
	LD	D,1	;SECTOR
	LD	HL,CCP	;LADEZIEL
LOAD1:  PUSH	BC	;NAECHSTEN SECTOR
	PUSH	DE
	PUSH	HL
	LD	C,D
	CALL	SSEC	;NEUEN SECT. ANWAEHLEN
	POP	BC	;BC=LADEADRESSE
	PUSH	BC	;LADEADR RETTEN
	CALL	SDMA
	CALL	RFLOP	;SYSTEM RAUFSCHREIBEN: WFLOP EINSETZEN
	CMP	0	;FEHLER?
	CANZ	RESTR	;JA
	POP	HL
	LD	DE,128
	ADD	HL,DE	;LADEADR.ERHOEHEN
	POP	DE
	POP	BC
	DEC	B	;SEKTORZAHL - 1
	JRZ	GOCPM-#
	INC	D	;NAECHSTEN SECT.
	LD	A,D
	CMP	21H	;LETZTER?
	JRC	LOAD1-#
	LD	D,1	;1.SECT.NAECHST.SPUR
	INC	C
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	STRCK
	POP	HL
	POP	DE
	POP	BC
	JR	LOAD1-#
;-------------------------------------------------------------
IRDSK:	LD	HL,0E200H	;RAMDIS INITIALISIEREN
	LD	DE,RDSK		;RAM-DISK
	LD	BC,51
	LDIR
	LD	HL,7003H	;SPRUNG ZUM CCP
	LD	(1),HL
	LD	A,2
	LD	(DISKS),A
	LD	HL,6206H	;BDOS-SPRUNG
	LD	(6),HL
	LD	A,0C3H
	LD	(HL),A
	LD	HL,BDOS+6
	LD	(6207H),HL
	RET
;----------------------------------------------------------
GOCPM:	LD	BC,80H
	CALL	SDMA
	LD	A,(4)	;AKTUELLES LW HOLEN
	LD	C,A
	JMP	CCP
;----------------------------------------------------------
WRITE:	LD	A,(4)
	OR	A
	JRZ	WFLOP-#
	CALL	WRDSK	;RAM-DISK
	RET
READ:	LD	A,(4)
	OR	A
	JRZ	RFLOP-#
	CALL	RRDSK	;RAM-DISK
	RET
;----------------------------------------------------------
;FLOPPY LESEN MIT SEKTOROEFLOESENUG
;IN: SEC1,TRACK,DMA V.BDOS
;OUT: DMA/BDOS=1/2ZDMA/FLOPPY
RFLOP:	PUSH	HL
	PUSH 	DE
	PUSH 	BC
;VERGLEICH OB AUS PUFFER GELESEN WERDEN KANN
	LD	A,46H	;LETZTE OPERATION LESEN ?
	LD	HL,CTAB	
	CMP	(HL)
	JRNZ	RFLP-#
	INC	HL
	LD	DE,RESLT	;GLEICHES LW ?
	LD	A,(DE)
	AND	3
	CMP	(HL)
	JRNZ	RFLP-#
	INC	HL	;GLEICHE SPUR ?
	INC 	DE
	INC	DE
	INC	DE
	LD	A,(DE)
	CMP	(HL)
	JRNZ	RFLP-#
	INC	HL	;KOPF ?
	INC	DE
	LD	A,(DE)
	CMP	(HL)
	JRNZ	RFLP-#
	INC	HL
	LD	A,(SEC1)	;HOSTSECTOR=BDOS/2
	RRA
	JRC	RFLP-#	;UNGERADE
	CMP	(HL)
	JRNZ	RFLP-#
;GLEICH, ALSO PUFFER LESEN, NICHT LW
	LD	HL,FDMA+80H	;QUELLE
	LD	DE,(DMA)	;ZIEL
	LD	BC,80H		;ANZAHL BYTES
	LDIR			;UEBERTRAGEN
	POP	BC
	POP	DE
	POP	HL
	XOR	A
	RET
RFLP:	CALL	TRANS		;SECTOR LESEN + UMRECHNEN
	PUSH	AF		;FEHLER FDC 8272
	LD	HL,FDMA
	BIT	1,B
	JRNZ	B2-#
	LD	HL,FDMA+80H	;QUELLE
	LD	DE,(DMA)	;ZIEL
	LD	BC,80H
	LDIR
	POP	AF
	POP	BC
	POP	DE
	POP	HL
	RET
;----------------------------------------------------------
;FLOPPY SCHREIBEN MIT SEKTOR EINFUEGEN
WFLOP:	PUSH	HL
	PUSH	DE
	PUSH 	BC	
	CALL	TRANS
	OR	A		;LESEFEHLER ?
	IRNZ	B4-#
	LD	DE,FDMA
	BIT	1,B
	JRNZ	B3-#
	LD	DE,FDMA+80H
B3:	LD	HL,(DMA)
	LD	BC,80H
	LDIR
	CALL	W8272
B4:	POP	BC
	POP	DE
	POP	HL
	RET
;----------------------------------------------------------
;SECTORUMRECHNUNG
;IN: BDOS-SECTOR-NR IN SEC1
;OUT: FLOPPY-SECTOR-NR IN SECTR
;  B=0 WENN VORDERER TEIL, SONST HINTEREN AUSWERTEN
;  GELESENER FLOPPY-SECTOR IN BIOS-PUFFER FDMA
TRANS:	EQU	#
	LD	B,0
	LD	A,(SEC1)	;BDOS-SECTOR
	OR	A
	RRA			;UNGERADE ? , /2
	JRNC	B1-#		;NEIN
	ADD	1
	CAC	RESTR 		;FEHLER
	LD	B,0FFH		;KENNZEICHEN
B1:	PUSH	BC
	LD	(SECTR),A
	CALL	R8272
	POP	BC
	RET
;----------------------------------------------------------
;TREIBER MIT U8272
;----------------------------------------------------------
INIFD:	LD	B,0		;INITIALISIERUNG P8272
	DJNZ	INIFD+2-#
	IN	CFDC
	CMP	80H
	JRZ	SPEZI-#
	IN	DFDC
	JR	INIFD-#		
SPEZI:	LD	HL,STAB-1	;PARAMETER LADEN	
	LD	BC,0303H	;SPECIFY-COMM 3BYTES
	CALL	WCOM1		;SCHREIBEN COMM
RECAL:	LD	BC,0207H	;SPUR 0 EINSTELLEN
	CALL	RDY		;DRIVE READY ?
;----------------------------------------------------------
SENSE:	LD	BC,0108H	;PRUEFE INTERRUPT STATUS
	CALL	WCOM
	CALL	RBYTE		;RESULT REG 0:IC1,IC2,SE,
	LD	B,A		; ,EC,NR,HD,US1,US2
	CMP	80H
	CANZ	RBYTE		;PCN HOLEN
	BIT	5,B		;SEEK ENDE ?
	JRZ	SENSE-#
RET
STAB:	DB	1FH		;XXXX=SRT, XXXX=HUT
	DB	33H		;XXXXXXX=HLT, X=ND
;----------------------------------------------------------
;SECTOR SCHREIBEN/LESEN IN BETRIEBSART OHNE DMA-SCHALTKREIS
;SECTOR IN (SECTR)
;SPUR   IN (TRACK)
;AKTUELLES LW IN (UNIT)
;ZIEL-/QUELLADRESSE = FDMA
;KILL: A B DE HL
W8272:	DB	11H		;CODE LD DE,... 
	OUTI			;WRITE DATA
	LD	A,45H		;SCHREIBKOMMANDO
	JR	RWIT-#
;----------------------------------------------------------
R8272:	DB	11H		;CODE LD DE,...
	INI	
	LD	A,46H		;LESEKOMMANDO
RWIT:	LD	(CTAB),A	
	LD	(MODE),DE	;EINTRAGEN INI/OUTI-OP-CODE
	CALL 	SEEK
RWLOP:	LD	B,10		;ANZAHL VERSUCHE
RWOP:	PUSH	BC
	DI
	LD	B,9		;9 COMMANDOBYTES
	LD	A,(CTAB)
	LD	A,C
	CALL	RDY		;AUSGABE KOMMANDO
	LD	HL,FDMA
	LD	C,DFDC
	CALL	RW
	OUT	TC		;ENDE-IMPULSE
	CALL	RRSLT
	POP	BC
	RZ			;STO=0=KEINE FEHLER
	DJNZ	RWOP-#
ERR:	LD	A,1
	RET			;ERROR
;----------------------------------------------------------
;SCHREIBEN ODER LESEN 256 BYTES
;IN: HL QUELLE ODER ZIEL
; C: DATENPORT
RW:	EQU	#
	LD	B,0		;256 BYTES
RW1:	IN	CFDC
	RLCA			;RQM-TEST
	JRNC	RW1-#
	RLCA			;DIO
	RLCA			;NON-DMA
	RNC			;FERTIG ?
MODE:	INI			;INI BEI READ DATA SONST OUTI
	JRNZ	RW1-#
	RET
;----------------------------------------------------------
SDS:	LD	BC,0204H	;PRUEFE LW STATUS
	CALL	WCOM
	CALL	RBYTE		;STATUS REG 3:FAULT,WP,RDY
	RET			; ,TO,TS,HD,US1,US2
;----------------------------------------------------------
SEEK:	LD	BC,030FH	;COMM SPUR EINSTELLEN
	CALL	RDY
	CALL	SENSE	SKBSY:	IN	CFDC
SKBSY:	IN	CFDC
	AND	0FH
	JRNZ	SKBSY-#
	RET
;----------------------------------------------------------
RDY:	PUSH	BC		LW BETRIEBSFAEHIG ?
	CALL	SDS
	POP	BC
	BIT	5,A		;READY-BIT IM STATUSREG 3
	CAZ	RESTR		;FEHLER
;----------------------------------------------------------
WCOM:	LD	HL,CTAB		;COMM IN FDC SCHREIBEN
;IN : B ANZAHL BYTES, C COMM
WCOM1:	CALL	DELAY
	IN	CFDC	
	AND	0C0H
	CMP	80H		;RQM,DIO=OUT
	JRNZ	WCOM1-#
	LD	A,C
	OUT	DFDC
	INC	HL
	LD	C,M
	JRNZ	WCOM1-#
	RET
;----------------------------------------------------------
DELAY:	PUSH	BC		;VERZOEGRNG STATUSFLAG 8272
	LD	B,0FH
DEL1:	DJNZ	DEL1-#
	POP	BC
	RET
;----------------------------------------------------------
RBYTE:	CALL	DELAY		;EIN BYTE LESEN
	CALL	IRDY
	IN	DFDC
	RET
;----------------------------------------------------------
RRSLT:	LD	B,6		;LESE 7 RESULT BYTES
	CALL	RBYTE
	LD	HL,RESLT
	LD	M,A
	AND	0C0H		;ERROR ?
	LD	C,A
RESL1:	CALL	RBYTE
	INC	HL
	LD	M,A
	DJNZ	RESL1-#
	LD	A,C		;FEHLERMELDUNG STATUS REG 0
	OR	A
	RET
;----------------------------------------------------------
IRDY:	IN	CFDC		;BEREIT DATENEINGABE ?
	RLCA
	JRNC	IRDY-#
	AND	80H
	RLCA
	RC
;----------------------------------------------------------
;FEHLERBEHANDLUNG
ERM:	DB	0FFH		;SPRUNG IN MONITOR
;----------------------------------------------------------
;RAM-DISK
;SCHREIBEN
WRDSK:	CALL	RADR		;SEKTORADRESSE BERECHNEN
	JRC	BDERR-#		;BEREICH UEBERSCHRITTEN
	EX	DE,HL		;ZIEL/QUELLADR. RAM-DISK
	LD	HL,(DMA)	;ZIEL/QUELLADR.BDOS
RDSK1:	LD 	BC,80H		;=1 SEKTOR
	LDIR	
	XOR	A
	RET
;LESEN
RRDSK:	CALL	RADR
	JRC	BDERR-#		;FEHLER
	LD	DE,(DMA)
	JR	RDSK1-#
BDERR:	LD	A,1		;BDOS-ERROR
	RET
;SECTORADR. IM RAM BERECHNEN
;DE AKT SPUR
;C AKT SECTOR
;B MAX SECTORENANZAHL/DISK
RADR:	LD	D,0
	LD	A,(TRACK)
	LD	E,A
	LD	A,(SEC1)
	LD	C,A
	LD	HL,0
	LD	B,26
RADR1:	ADD	HL,DE	;UMWANDLUNG SPUREN IN SEKTOREN
	DJNZ	RADR1-#
	ADD	HL,BC	;AKTUELLER SEKTOR DAZU
	ADD	HL,HL	;UMWANDLUNG SEKTOREN IN BYTES
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	AD	HL,HL
	ADD	HL,HL
	LD	BC,RDSK	;RAM-DISK-ANFANG
	ADD	HL,BC
	LD	A,0BFH	;HIGH-ADR- RAM-DISK
	CMP	H
	RET
;----------------------------------------------------------
DPBAS:	EQU	#
DPHA:	DA	0
	DA	0
	DA	0
	DA	0
	DA	DIRBF
	DA	DPBF
	DA	CHK0
	DA	ALL0
DPHR:	DA	0
	DA	0
	DA	0
	DA	0
	DA	DIRBF
	DA	DPBR	;GERAETEBESCHREIBUNG
	DA	CHK1	;DIRECTORY-KONTROLLE
;DISK-PARAMETER-BLOCK RAM-DISK
DPBR:	DA	26	;SECTOREN
	DB	3	;BLOCKGROSZE 1K
	DB	7	;(SECTOREN/BLOCK)-1
	DB	00	;NICHT BENUTZT
	DA	20	;(BLOCKGROESZE/DISK)-1
	DA	31	;32 DIRECTORY-EINTRAEGE
	DB	080H	;1 BELEGTER BLOCK DURCH DIR
	DB	0
	DA	16	;DIR/4
	DA	0	;SPURENDURCH SYSTEM BELEGT
;DISK PARAMETER-BLOCK FLOPPY 5,25 ZOLL

DPBF:	DA	20H	;20 LOGISCHE=10H=16 PHYSISCHE SEC/TRACK
	DB	4	;2K BLOECKE
	DB	15
	DB	1
	DA	73
	DA	63	
	DB	80H
	DB	0
	DA	16
	DA	3	;SYSTEMSPUREN
;----------------------------------------------------------
DRUCK:	EQU	#	;FOLGT
;----------------------------------------------------------

;RAM-ADRESSEN

	ORG	0F800H
CTAB:	DB	46H	;MFM LESEN
UNIT:	DB	0	;LW A VOREINSTELLEN
TRACK:	DB	0
HEAD:	DB	0
SECTR:	DB	1
N:	DB	1	;N=1=256 BYTES
EOT:	DB	16	;16 SECTOREN/TRACK
GPL:	DB	1BH	;LUECKE
DTL:	DB	OFFH
RESLT:	BER	7	;RESULT TAB F.FDC
DZEIL:	DB	30	;DRUCKER 30 ZEILEN/SEITE
MERK:	DB	0	;UMSCHALTZEICHEN FERNSCHREIBER 
SEC1:	DB	1	;BDOS-SEKTOR
DMA:	DA	80H	;BDOS-DMA
DIRBF:	BER	128	;DIRECTORY
ALL0:	BER	31	;
CHK0:	BER	16
ALL1:	BER	31
CHK1:	BER	16
FDMA:	BER	256	;FLOPPY-ZWISCHENSPEICHER IM BIOS

	ORG	DRUCK

	TITL	'DRUCK'



;DEFINITION VON KONSTANTEN

PIOAD:	EQU	0FCH
CR:	EQU	0DH
LF:	EQU	0AH
ZS:	EQU	0F089H
;----------------------------------------------------------
;DRUCK MIT FRENSCHREIBER F12XX
;----------------------------------------------------------
;DRUCKPROGRAMM FUER GROSZE UND KLEINE BUCHSTABEN
;IN C: ZEICHEN IN ASCII
;OUT A: ZEICHEN IN CCITT
;KILL : A,F
	PUSH	BC
	PUSH	DE
	PUSH 	HL
	LD	A,LF
	CMP	C
	CAZ	ZEPR	
	CALL	KODE	;ZEICHEN IN A CCITT, C ASCII
	CALL	ART
	LD	HL,MERK
	CMP	(HL)
	JRZ	ZAUS-#	;KEIN STEUERZEICHEN AUSGEBEN
	LD	(HL),A	;NEUE ART LADEN
	CALL 	FSA
ZAUS:	LD	A,C
	CALL	FSA
	POP	HL
	POP	DE
	POP	BC
	RET	
;KODEWANDLUNG ASCII-CCITT
;IN C ZEICHEN
;OUT A CCITT C ASCII
;T7S STEUER ASCII
;T5S
;T7K KLEINE ASCII
;T51
;T7G GROSZE ASCII
;T53
;T7Z ZEICHEN ASCII
;T52
KODE:	EQU	#
	PUSH BC
	LD	A,C
	LD	HL,LT7S
	LD	BC,LT7S
	PUSH	BC
	POP	DE
	CPIR
	JRZ	GF-#
	LD	HL,T7K
	LD	BC,LT7K
	PUSH	BC
	POP	DE
	CPIR
	JRZ	GF-#
	LD	HL,T7G
	LD	BC,LT7G
	PUSH	BC
	POP	DE
	CPIR
	JRZ	GF-#
	LD	HL,T7Z
	LD	BC,LT7Z
	PUSH	BC
	POP	DE
	CPIR
	JRZ	GF-#
	LD	A,4
	POP	BC
	RET
GF:	ADD	HL,DE
	DEC	HL
	LD	A,(HL)
	POP	BC
	RET
ZEPR:	LD	HL,DZEIL	;ZEILENZAHL/SEITE PRUEFEN
	PUSH 	BC		;PAUSE NACH CRLF BEI 100 BAUD
	LD	B,40H
Z2:	CALL	ZS
	DJNZ	Z2-#
	POP	BC
	DEC	(HL)
	RNZ
LCRLF:	PUSH	AF		;AUSGABE 4 LEERZEILEN
	PUSH 	BC
	LD	A,30
	LD	(HL),A
	LD	B,4	
L1:	LD	A,2		;LF IN CCITT
	CALL 	FSA
	DJNZ	L1-#
	POP	BC
	POP	AF
	RET
;SUBROUTINE ART ERMITTELN
;IN: C ASCII
;(HL) LETZTE ART
;A ASCII
;OUT: A STEUERZEICHEN
;C CCITT
;<40H=ZIFFER=D0=1, >60H=KLEINE BUCHST.=A=0, SONST D1=1 
ART:	PUSH 	AF
	PUSH 	BC
	LD	A,C
	CMP	60H
	JRNC	KB-#
	CMP	40H
	JRNC	GB-#
	POP	BC
	POP	AF
	LD	C,A
	LD	A,1BH		;ZI/ZEI
	RET
KB:	POP	BC
	POP	AF
	LD	C,A
	LD	A,1FH		;KLEINE
	RET	
GB:	POP	BC
	POP	AF
	LD	C,A
	XOR	A
	RET
;FERNSCHREIBERAUSGABEUEBER PIO
FSA:	PUSH	BC
	LD	B,8
	OR	60H
IRLA
FSA1:	OUT	PIOAD
	CALL	ZS
	CALL	ZS
	RRA
	DJNZ	FSA1-#
	POP	BC
	RET
;TABELLEN
T7S:	DB	LF
	DB	CR
	DB	20H
LT7S:	EQU	#-T7S
T5S:	DB	2
        DB	8
        DB	4
T7K:	DB	61H
        DB	62H
        DB	63H
        DB	64H
        DB	65H	
        DB	66H
	DB	67H
        DB	68H
        DB	69H
        DB	6AH
        DB	6BH
        DB	6CH
        DB	6DH
        DB	6EH
        DB	6FH
        DB	70H
        DB	71H
        DB	72H
	DB	73H
        DB	74H
        DB	75H
        DB	76H
        DB	77H
        DB	78H
        DB	79H
        DB	7AH
LT7K:   EQU	#-T7K
T51:    DB	3
        DB	19H
        DB	0EH
        DB	9
        DB	1
        DB	ODH
        DB	1AH
        DB	14H
        DB	6
        DB	0BH
        DB	0FH
        DB	12H
        DB	1CH
        DB	0CH
        DB	18H
	DB	16H
        DB	17H
        DB	0AH
        DB	5
        DB	10H
        DB	07H
        DB	1EH
        DB	13H
        DB	1DH
        DB	15H
        DB	11H
T7G:    DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
LT7G:   EQU	#-T7G
T53:    DB	3
        DB	19H
        DB	0EH
        DB	09H
        DB	01H
        DB	0DH
        DB	1AH
        DB	14H
        DB	06
        DB	0BH
        DB	0FH
        DB	12H
        DB	1CH
        DB	0CH
        DB	18H
        DB	16H
        DB	17H
        DB	0AH
        DB	5
        DB	10H
        DB	7
        DB	1EH
        DB	13H
        DB	1DH
        DB	15H
        DB	11H
T7Z:    DB	' !"()+,-./0123456789:=?'
LT7Z:   EQU	#-T7Z
T52:    DB	4
        DB	1DH
        DB	05H
        DB	0FH
        DB	12H
        DB	11H
        DB	0CH
	DB	03H
	DB	1CH
	DB	1DH
	DB	16H
	DB	17H
	DB	13H
	DB	01H
	DB	0AH
	DB	10H
	DB	15H
	DB	07
	DB	6
	DB	18H
	DB	0EH
	DB	1EH
	DB	19H
	ORG	0F800H
;----------------------------------------------------------
CTAB:	DB	46H	;MFM LESEN
UNIT:	DB	1	;LW B VOREINSTELLEN
TRACK:	DB	0
HEAD:	DB	0
SECTR:	DB	1
N:	DB	1	;N=1=256 BYTES
EOT:	DB	15	;15 SECTOREN/TRACK
GPL:	DB	1BH	;LUECKE
DTL:	DB	OFFH
RESLT:	BER	7	;RESULT TAB F.FDC
DZEIL:	DB	30	;DRUCKER 30 ZEILEN/SEITE
MERK:	DB	0	;UMSCHALTZEICHEN FERNSCHREIBER 
SEC1:	DB	1	;BDOS-SEKTOR
DMA:	DA	80H	;BDOS-DMA
DIRBF:	BER	128	;DIRECTORY
ALL0:	BER	31	;
CHK0:	BER	16
ALL1:	BER	31
CHK1:	BER	16
	END
